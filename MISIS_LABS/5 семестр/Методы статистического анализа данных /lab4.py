from collections import defaultdict
import scipy.stats as stats

alpha = 0.05 # –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏

lines = open("–ú–æ—Å–∫–≤–∞_2021.txt").readlines()
lines = list(map(int, lines))

freq = defaultdict(int)

def mean(arr: list[int]):
    return sum(arr) / len(arr)


for num in lines:
    freq[num] += 1

n = len(freq)
meanx = sum(freq.keys())/n
meany = sum(freq.values())/n
sigma_x = (sum(i**2 for i in freq.keys())/n - meanx**2)**(1/2)
sigma_y = (sum(i**2 for i in freq.values())/n - meany**2)**(1/2)
meanxy = sum(i*j for i,j in freq.items())/n

print("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ x:", meanx)
print("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ y:", meany)
print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ x:", sigma_x)
print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ y:", sigma_y)
print("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è x –∏ y:",meanxy)
kkxy = (meanxy - meanx*meany)/(sigma_x*sigma_y)
print('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ x –∏ y —Ä–∞–≤–µ–Ω:', kkxy)
tnabl = kkxy*(n-2)**(1/2)/(1-kkxy**2)**(1/2)
print("–ù–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",tnabl)




tcritical = stats.t.ppf(1 - alpha / 2, df=n - 2)

print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è: {tcritical:.4f}")
if abs(tnabl)<tcritical:
  print("–ì–∏–ø–æ—Ç–µ–∑–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è. –í–µ–ª–∏—á–∏–Ω—ã X –∏ Y –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã")
else:
  print("–ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è. –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ùëüùë•ùë¶ –∑–Ω–∞—á–∏–º–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω—É–ª—è. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–µ–ª–∏—á–∏–Ω—ã X –∏ Y –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω—ã. ")


# –∑–∞–¥–∞–Ω–∏–µ 3
import matplotlib.pyplot as plt
plt.figure(figsize=(15,6))
plt.scatter(freq.keys(), freq.values())
plt.grid(visible=True)

plt.show()
intervals={}
intervals_av={}
intervals_disp={}
for i in range (14,73,9):
  intervals[str(i)+'-'+str(i+9)]=0
  intervals_av[str(i)+'-'+str(i+9)]=0
  intervals_disp[str(i)+'-'+str(i+9)]=0

for i in freq:
  for j in intervals:
    l, r = (int(number) for number in j.split('-'))
    if i>=l and i<r:
      intervals[j]+=freq[i]
      intervals_av[j]+=i*freq[i]
      intervals_disp[j]+=i**2*freq[i]

for i in intervals:
  intervals_av[i]/=intervals[i]
  intervals_disp[i]/=intervals[i]

for i in intervals_disp:
  intervals_disp[i]=intervals_disp[i]-intervals_av[i]**2

disp_vngr = 0
for i in intervals_disp:
  disp_vngr +=intervals_disp[i]*intervals[i]/sum(freq.values())

print("–í–Ω—É—Ç—Ä–∏–≥—Ä—É–ø–ø–æ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è",disp_vngr)

disp_mgr = 0
disp_mgr = 0
average = sum(int(i) for i in lines)/len(lines)
disp_mgr = 0


for i in intervals_av:
  disp_mgr += ((intervals_av[i]-average)**2)*intervals[i]/len(lines)

print("–ú–µ–∂–≥—Ä—É–ø–ø–æ–≤–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è",disp_mgr)

disp_ob = disp_vngr+disp_mgr
print("–û–±—â–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è",disp_ob)

kor_otn = (disp_mgr/disp_ob)**(1/2)
print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ:",kor_otn)
